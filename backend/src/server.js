import express from 'express'
import { createServer } from 'http'
import { Server } from 'socket.io'
import cors from 'cors'
import dotenv from 'dotenv'
import path from 'path'
import { fileURLToPath } from 'url'

// ÂØºÂÖ•Ë∑ØÁî±
import authRoutes from './routes/auth.js'
import gameRoutes from './routes/game.js'
import userRoutes from './routes/user.js'

// ÂØºÂÖ•SocketÂ§ÑÁêÜ
import { handleSocketConnection } from './socket/gameSocket.js'

// ÂØºÂÖ•‰∏≠Èó¥‰ª∂
import errorHandler from './middleware/errorHandler.js'
import { authenticateToken } from './middleware/auth.js'

// ÂØºÂÖ•Á´ØÂè£ÁÆ°ÁêÜÂ∑•ÂÖ∑
import { ensurePort, getPortInfo } from './utils/portManager.js'

// ESÊ®°ÂùóÁöÑ__dirnameÊõø‰ª£ÊñπÊ°à
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config()

const app = express()
const server = createServer(app)
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:3000",
    methods: ["GET", "POST"]
  }
})

const PORT = process.env.PORT || 3001

// ‰∏≠Èó¥‰ª∂
app.use(cors({
  origin: process.env.FRONTEND_URL || "http://localhost:3000",
  credentials: true
}))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

// ÈùôÊÄÅÊñá‰ª∂ÊúçÂä°
app.use(express.static(path.join(__dirname, '../public')))

// APIË∑ØÁî±
app.use('/api/auth', authRoutes)
app.use('/api/game', authenticateToken, gameRoutes)
app.use('/api/user', authenticateToken, userRoutes)

// ÂÅ•Â∫∑Ê£ÄÊü•
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  })
})

// Socket.IOËøûÊé•Â§ÑÁêÜ
io.on('connection', (socket) => {
  console.log(`Áî®Êà∑ËøûÊé•: ${socket.id}`)
  handleSocketConnection(socket, io)
})

// ÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂
app.use(errorHandler)

// 404Â§ÑÁêÜ
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'APIÁ´ØÁÇπ‰∏çÂ≠òÂú®',
    path: req.originalUrl 
  })
})

// ‰ºòÈõÖÂÖ≥Èó≠
const gracefulShutdown = (signal) => {
  console.log(`Êî∂Âà∞ ${signal} ‰ø°Âè∑ÔºåÊ≠£Âú®‰ºòÈõÖÂú∞ÂÖ≥Èó≠ÊúçÂä°Âô®...`);

  // È¶ñÂÖàÂÖ≥Èó≠ Socket.IO ÊúçÂä°Âô®ÔºåËøôÂ∞ÜÊñ≠ÂºÄÊâÄÊúâËøûÊé•ÁöÑÂÆ¢Êà∑Á´Ø
  io.close(() => {
    console.log('Socket.IO ÊúçÂä°Âô®Â∑≤ÂÖ≥Èó≠„ÄÇ');

    // ÁÑ∂ÂêéÂÖ≥Èó≠ HTTP ÊúçÂä°Âô®
    server.close(() => {
      console.log('HTTP ÊúçÂä°Âô®Â∑≤ÂÖ≥Èó≠„ÄÇ');
      process.exit(0);
    });
  });

  // Ê∑ªÂä†‰∏Ä‰∏™Ë∂ÖÊó∂‰ª•Âº∫Âà∂ÈÄÄÂá∫Ôºå‰ª•Èò≤‰∏á‰∏Ä
  setTimeout(() => {
    console.error('Êó†Ê≥ïÂú®10ÁßíÂÜÖÂÆåÊàêÂÖ≥Èó≠ÔºåÂº∫Âà∂ÈÄÄÂá∫„ÄÇ');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Start server with port management
async function startServer() {
  const preferredPort = PORT

  try {
    // Get port information
    const portInfo = await getPortInfo(preferredPort)

    if (!portInfo.available) {
      console.log(`‚ö†Ô∏è  Port ${preferredPort} is occupied`)
      if (portInfo.process) {
        console.log(`   Process: ${portInfo.process.name || 'Unknown'} (PID: ${portInfo.process.pid})`)
      }
    }

    // Ensure port is available with auto-cleanup and fallback
    const result = await ensurePort(preferredPort, {
      autoClear: true,      // Auto-kill process on port
      findAlternative: true // Find alternative port if needed
    })

    if (!result.success) {
      console.error(`‚ùå Failed to secure port: ${result.message}`)
      console.error(`   Please manually close the application using port ${preferredPort}`)
      console.error(`   Or run: netstat -ano | findstr :${preferredPort}`)
      process.exit(1)
    }

    const finalPort = result.port

    if (result.wasCleared) {
      console.log(`‚úÖ Port ${finalPort} was cleared and is now available`)
    } else if (result.wasAlternative) {
      console.log(`‚ÑπÔ∏è  Using alternative port ${finalPort} (preferred port ${preferredPort} was occupied)`)
    }

    // Start listening
    server.listen(finalPort, () => {
      console.log(`üöÄ Server running at http://localhost:${finalPort}`)
      console.log(`üìù API health check: http://localhost:${finalPort}/api/health`)
      console.log(`üéÆ Socket.IO service started`)
      console.log(`üåê Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:3000'}`)
      console.log(``)
      console.log(`Press Ctrl+C to stop`)
    })

    // Handle server errors
    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        console.error(`‚ùå Port ${finalPort} is already in use`)
        process.exit(1)
      } else {
        console.error(`‚ùå Server error:`, error.message)
        process.exit(1)
      }
    })

  } catch (error) {
    console.error(`‚ùå Failed to start server:`, error.message)
    process.exit(1)
  }
}

// Start the server
startServer()